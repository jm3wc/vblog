import{_ as s,c as a,o as n,a2 as e}from"./chunks/framework.CSGcjqEA.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Composer.md","filePath":"Composer.md"}'),p={name:"Composer.md"},o=e(`<h2 id="composer" tabindex="-1">Composer <a class="header-anchor" href="#composer" aria-label="Permalink to &quot;Composer&quot;">​</a></h2><h2 id="快速入门" tabindex="-1">快速入门 <a class="header-anchor" href="#快速入门" aria-label="Permalink to &quot;快速入门&quot;">​</a></h2><h2 id="什么是composer" tabindex="-1">什么是Composer <a class="header-anchor" href="#什么是composer" aria-label="Permalink to &quot;什么是Composer&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>简单来说，Composer是 PHP 用来管理依赖（dependency）关系的工具，也就是一个安装包管理工具。</span></span>
<span class="line"><span>它包括了两个部分：Composer 和 Packagist</span></span>
<span class="line"><span>Packagist 是 Composer 的默认的开发包仓库</span></span></code></pre></div><ul><li><a href="https://packagist.org/" target="_blank" rel="noreferrer">Packagist 英文官网</a></li><li><a href="https://docs.phpcomposer.com/" target="_blank" rel="noreferrer">composer文档</a></li><li><a href="https://www.phpcomposer.com/" target="_blank" rel="noreferrer">composer官网</a></li><li><a href="https://pkg.phpcomposer.com/" target="_blank" rel="noreferrer">Packagist中国全量镜像</a></li><li><a href="https://mirrors.aliyun.com/composer/" target="_blank" rel="noreferrer">阿里镜像源</a></li></ul><h2 id="windows安装" tabindex="-1">windows安装 <a class="header-anchor" href="#windows安装" aria-label="Permalink to &quot;windows安装&quot;">​</a></h2><p><a href="https://getcomposer.org/download/" target="_blank" rel="noreferrer"><strong>composer下载</strong></a></p><p><strong>第一步、选择给哪个用户安装，推荐选择第一个</strong></p><p><img src="http://web.wdwangke.com/mdphoto/backend/backend/composer/composer01.png" alt="img"></p><p><strong>第二步，如图选择，不过根据自己的需求选择</strong></p><p><img src="http://web.wdwangke.com/mdphoto/backend/backend/composer/composer02.png" alt="img"></p><p><strong>第三步，安装路径，根据自己的需求选择</strong></p><p><img src="http://web.wdwangke.com/mdphoto/backend/backend/composer/composer03.png" alt="img"></p><p><strong>第四步，点browser，选择自己的php版本，后面都直接next就好</strong></p><p><img src="http://web.wdwangke.com/mdphoto/backend/backend/composer/composer04.png" alt="img"></p><p><strong>第五步，修改环境变量</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，在用户变量中添加环境变量</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PATH:D:\\Program Files\\composer</span></span></code></pre></div><p><strong>第六步，打开cmd并输入composer，提示这个说明你已经安装成功了</strong></p><p><img src="http://web.wdwangke.com/mdphoto/backend/backend/composer/composer05.png" alt="img"></p><h2 id="切换镜像" tabindex="-1">切换镜像 <a class="header-anchor" href="#切换镜像" aria-label="Permalink to &quot;切换镜像&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>至此，我们安装好了Composer，但是众所周知，由于某些原因</span></span>
<span class="line"><span>github和packagist在国内有时会访问不了，或者速度很慢，这就会导致使用Composer时的各种问题</span></span>
<span class="line"><span>还好我们国内有Packagist中国全量镜像和阿里镜像可以解决这个问题，只需要把仓库的路径修改为镜像的路径即可</span></span></code></pre></div><h2 id="全局配置-推荐的方式" tabindex="-1"><strong>全局配置(推荐的方式)</strong> <a class="header-anchor" href="#全局配置-推荐的方式" aria-label="Permalink to &quot;**全局配置(推荐的方式)**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>这个命令会修改Composer的全局配置文件 config.json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span></span></code></pre></div><h2 id="查看全局配置" tabindex="-1"><strong>查看全局配置</strong> <a class="header-anchor" href="#查看全局配置" aria-label="Permalink to &quot;**查看全局配置**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer config -l -g</span></span></code></pre></div><h2 id="取消全局配置" tabindex="-1"><strong>取消全局配置</strong> <a class="header-anchor" href="#取消全局配置" aria-label="Permalink to &quot;**取消全局配置**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer config -g --unset repos.packagist</span></span></code></pre></div><h2 id="修改单个项目的配置" tabindex="-1"><strong>修改单个项目的配置</strong> <a class="header-anchor" href="#修改单个项目的配置" aria-label="Permalink to &quot;**修改单个项目的配置**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span></span></code></pre></div><h2 id="这个命令会修改项目下的composer-json文件-添加如下的配置信息" tabindex="-1"><strong>这个命令会修改项目下的composer.json文件，添加如下的配置信息：</strong> <a class="header-anchor" href="#这个命令会修改项目下的composer-json文件-添加如下的配置信息" aria-label="Permalink to &quot;**这个命令会修改项目下的composer.json文件，添加如下的配置信息：**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;repositories&quot;: {</span></span>
<span class="line"><span>    &quot;packagist&quot;: {</span></span>
<span class="line"><span>        &quot;type&quot;: &quot;composer&quot;,</span></span>
<span class="line"><span>        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>当然你也可以直接手动修改composer.json文件，添加上面那段配置信息</span></span></code></pre></div><p><strong>取消当前项目配置</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer config --unset repos.packagist</span></span></code></pre></div><p><strong>注：使用仅修改当前项目配置要切换到该项目根目录</strong></p><p><strong>Composer更新</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer selfupdate</span></span>
<span class="line"><span></span></span>
<span class="line"><span>或者（两者是等效的）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>composer self-update</span></span></code></pre></div><p><strong>如果想进行版本的回滚，可以使用以下命令：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer selfupdate --rollback</span></span></code></pre></div><h2 id="composer的基本使用" tabindex="-1">Composer的基本使用 <a class="header-anchor" href="#composer的基本使用" aria-label="Permalink to &quot;Composer的基本使用&quot;">​</a></h2><h2 id="composer-json" tabindex="-1"><strong>composer.json</strong> <a class="header-anchor" href="#composer-json" aria-label="Permalink to &quot;**composer.json**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>安装完Composer后，想要在项目里开始使用它，你唯一需要做的就是创建一个composer.json文件。</span></span>
<span class="line"><span>这个文件描述了你这个项目所依赖的包以及一些其他的元信息。</span></span></code></pre></div><h2 id="require" tabindex="-1"><strong>require</strong> <a class="header-anchor" href="#require" aria-label="Permalink to &quot;**require**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>通过require这个配置项，我们可以指定项目的依赖</span></span>
<span class="line"><span>require的值是一个对象，对象里的每一个键对应一个依赖</span></span>
<span class="line"><span>假设我们项目需要用到monolog/monolog这个日志库，那么我们可以这样配置composer.json文件：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;require&quot;: {</span></span>
<span class="line"><span>        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="安装依赖" tabindex="-1"><strong>安装依赖</strong> <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;**安装依赖**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer会根据上面配置的版本约定下载最新版本的\`monolog/monolog\`到默认目录\`vendor\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>composer install</span></span></code></pre></div><h2 id="更新依赖" tabindex="-1"><strong>更新依赖</strong> <a class="header-anchor" href="#更新依赖" aria-label="Permalink to &quot;**更新依赖**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>更新所有的依赖</span></span>
<span class="line"><span>composer update</span></span>
<span class="line"><span></span></span>
<span class="line"><span>更新某个依赖</span></span>
<span class="line"><span>composer update monolog/monolog</span></span></code></pre></div><h2 id="卸载依赖" tabindex="-1"><strong>卸载依赖</strong> <a class="header-anchor" href="#卸载依赖" aria-label="Permalink to &quot;**卸载依赖**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer remove monolog/monolog</span></span></code></pre></div><h2 id="composer-lock文件" tabindex="-1"><strong>composer.lock文件</strong> <a class="header-anchor" href="#composer-lock文件" aria-label="Permalink to &quot;**composer.lock文件**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>运行完上面的install命令后，你会发现除了vendor目录，还会多了一个composer.lock文件</span></span>
<span class="line"><span>这个文件保存了项目已经安装的每个包的具体版本</span></span>
<span class="line"><span>在运行install命令的时候，如果存在这个文件，则Composer会根据这个文件下载对应版本的包</span></span>
<span class="line"><span>这样的好处是可以保证各个环境的依赖的版本一致，否则如果没有这个文件</span></span>
<span class="line"><span>每个环境在运行install时可能下载到的版本就不一致了</span></span>
<span class="line"><span>所以建议把composer.lock文件也放到版本控制里</span></span></code></pre></div><h2 id="packagist搜索库" tabindex="-1"><strong>Packagist搜索库</strong> <a class="header-anchor" href="#packagist搜索库" aria-label="Permalink to &quot;**Packagist搜索库**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>要下载什么包，可以去 https://packagist.org/ 找一下包名及其版本信息</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装命令也直接搜索出来</span></span></code></pre></div><h2 id="不需要composer-json文件安装依赖" tabindex="-1"><strong>不需要composer.json文件安装依赖</strong> <a class="header-anchor" href="#不需要composer-json文件安装依赖" aria-label="Permalink to &quot;**不需要composer.json文件安装依赖**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>不需要配置composer.json文件</span></span>
<span class="line"><span>直接使用 composer require 命令下载类包(自动更新composer.json文件)</span></span>
<span class="line"><span>下面以下载 phpexcel 为例：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>composer require phpexcel/phpexcel</span></span></code></pre></div><h2 id="composer常用命令" tabindex="-1"><strong>composer常用命令</strong> <a class="header-anchor" href="#composer常用命令" aria-label="Permalink to &quot;**composer常用命令**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>composer list    获取帮助信息</span></span>
<span class="line"><span>composer search    在当前项目中搜索依赖包</span></span>
<span class="line"><span>composer show    列举所有可用的资源包</span></span></code></pre></div>`,57),t=[o];function i(l,c,r,h,d,g){return n(),a("div",null,t)}const b=s(p,[["render",i]]);export{u as __pageData,b as default};
