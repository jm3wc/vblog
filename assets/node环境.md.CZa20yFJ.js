import{_ as n,c as s,o as a,a2 as p}from"./chunks/framework.CSGcjqEA.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"node环境.md","filePath":"node环境.md"}'),e={name:"node环境.md"},l=p(`<h2 id="node环境搭建" tabindex="-1">Node环境搭建 <a class="header-anchor" href="#node环境搭建" aria-label="Permalink to &quot;Node环境搭建&quot;">​</a></h2><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><blockquote><p><a href="https://www.cnblogs.com/gaozejie/p/10689742.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/gaozejie/p/10689742.html(opens new window)</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/wyy1234/p/9727142.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/wyy1234/p/9727142.html</a></p></blockquote><h2 id="nvm安装" tabindex="-1">nvm安装 <a class="header-anchor" href="#nvm安装" aria-label="Permalink to &quot;nvm安装&quot;">​</a></h2><blockquote><p>下载nvm-setup.zip <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">https://github.com/coreybutler/nvm-windows/releases</a></p></blockquote><h2 id="安装nvm" tabindex="-1">安装nvm <a class="header-anchor" href="#安装nvm" aria-label="Permalink to &quot;安装nvm&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>首先把nvm-setup.zip解压到比如E:/dev/nvm 中(其它盘也可以)</span></span>
<span class="line"><span>然后以管理员的身份运行nvm-setup</span></span>
<span class="line"><span>选择nvm安装目录为 E:\\dev\\nvm</span></span>
<span class="line"><span>node安装目录为 E:\\dev\\nodejs</span></span>
<span class="line"><span>修改settings.txt的内容为：</span></span>
<span class="line"><span>root: E:\\dev\\nvm</span></span>
<span class="line"><span>path: E:\\dev\\nodejs</span></span>
<span class="line"><span>arch: 64</span></span>
<span class="line"><span>proxy: none</span></span>
<span class="line"><span>node_mirror: http://npm.taobao.org/mirrors/node/</span></span>
<span class="line"><span>npm_mirror: https://npm.taobao.org/mirrors/npm/</span></span></code></pre></div><h2 id="nvm配置步骤" tabindex="-1">nvm配置步骤 <a class="header-anchor" href="#nvm配置步骤" aria-label="Permalink to &quot;nvm配置步骤&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nvm安装</span></span>
<span class="line"><span>下载地址https://github.com/coreybutler/nvm-windows/releases    (opens new window)下载nvm-setup.zip</span></span>
<span class="line"><span></span></span>
<span class="line"><span>下载</span></span>
<span class="line"><span>nvm-setup.zip</span></span>
<span class="line"><span></span></span>
<span class="line"><span>在盘符创建文件夹nvm</span></span>
<span class="line"><span>里面创建nodejs文件（切换版本的node版本）</span></span>
<span class="line"><span>在创建一个跟父级同名 nvm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装nvm </span></span>
<span class="line"><span>第一个文件目录安装在nvm 删除一个nvm</span></span>
<span class="line"><span>第二个安装软件在node</span></span>
<span class="line"><span></span></span>
<span class="line"><span>用管理员运行命令</span></span>
<span class="line"><span></span></span>
<span class="line"><span>开启多版本管理nvm on</span></span>
<span class="line"><span>查看可以下载的node版本 nvm list available</span></span>
<span class="line"><span></span></span>
<span class="line"><span>下载node的版本 nvm install 16.14.2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>切换node版本命令 nvm use 16.14.2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看电脑已下载安装版本 nvm list</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看环境变量</span></span>
<span class="line"><span>在nvm里的nvm创建npm文件夹（安装全局依赖）</span></span>
<span class="line"><span>在系统变量创建</span></span>
<span class="line"><span>NPM_HOME</span></span>
<span class="line"><span>E:\\nvm\\nvm\\nvm\\npm(路径)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>在path添加%NPM_HOME%的值</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装npm install npm -g</span></span>
<span class="line"><span></span></span>
<span class="line"><span>测试 nrm test</span></span>
<span class="line"><span></span></span>
<span class="line"><span>nvm ls</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看可用镜像源 nrm ls</span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用哪个镜像源 nrm use taobao</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看已选镜像源 nrm test</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>脚手架</span></span>
<span class="line"><span>npm install -g @vue/cli@4（@4指定版本 vue2版本）</span></span></code></pre></div><h2 id="nvm环境变量" tabindex="-1">nvm环境变量 <a class="header-anchor" href="#nvm环境变量" aria-label="Permalink to &quot;nvm环境变量&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</span></span>
<span class="line"><span></span></span>
<span class="line"><span>新增环境变量</span></span>
<span class="line"><span>NVM_HOME:E:\\dev\\nvm</span></span>
<span class="line"><span>NVM_SYMLINK:E:\\dev\\nodejs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改环境变量</span></span>
<span class="line"><span>PATH:%NVM_HOME%;%NVM_SYMLINK%</span></span></code></pre></div><h2 id="开启多版本控制" tabindex="-1">开启多版本控制 <a class="header-anchor" href="#开启多版本控制" aria-label="Permalink to &quot;开启多版本控制&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nvm on</span></span></code></pre></div><h2 id="通过nvm安装node" tabindex="-1">通过nvm安装node <a class="header-anchor" href="#通过nvm安装node" aria-label="Permalink to &quot;通过nvm安装node&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nvm -v //查看nvm版本</span></span>
<span class="line"><span>nvm install latest  //安装最新版本</span></span>
<span class="line"><span>nvm install 8.12.0  //下载指定版本</span></span>
<span class="line"><span>nvm use 8.12.0 //使用指定版本</span></span>
<span class="line"><span>nvm ls //查看已经安装的nodejs版本</span></span>
<span class="line"><span>node -v //查看nodejs版本</span></span></code></pre></div><h2 id="安装全局npm" tabindex="-1">安装全局npm <a class="header-anchor" href="#安装全局npm" aria-label="Permalink to &quot;安装全局npm&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>安装node的时候，npm其实也已经一起安装了</span></span>
<span class="line"><span>因为nvm可以管理多个版本的node，如果每次添加一个node版本都要安装一堆的包就很麻烦</span></span>
<span class="line"><span>如果有一个npm可以让各个版本的node共用，就不会这么麻烦了</span></span>
<span class="line"><span>这就是为什么我们要配置一个全局的npm的原因</span></span>
<span class="line"><span>简单的三步就可以配置一个全局的npm</span></span>
<span class="line"><span>配置用npm下载包时全局安装的包路径</span></span>
<span class="line"><span>npm config set prefix &quot;E:\\dev\\nvm\\npm&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装cnpm淘宝镜像  https://npmmirror.com/</span></span>
<span class="line"><span>npm install -g cnpm --registry=https://registry.npmmirror.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span>新增环境变量</span></span>
<span class="line"><span>NPM_HOME=E:\\dev\\nvm\\npm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改环境变量</span></span>
<span class="line"><span>path中添加%NPM_HOME%</span></span></code></pre></div><h2 id="nvm常用命令" tabindex="-1">nvm常用命令 <a class="header-anchor" href="#nvm常用命令" aria-label="Permalink to &quot;nvm常用命令&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>显示nvm版本</span></span>
<span class="line"><span>nvm version</span></span>
<span class="line"><span></span></span>
<span class="line"><span>开启和关闭node版本管理</span></span>
<span class="line"><span>nvm on</span></span>
<span class="line"><span>nvm off</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装node，最新稳定版本latest</span></span>
<span class="line"><span>nvm install latest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>显示已安装的node版本</span></span>
<span class="line"><span>nvm list</span></span>
<span class="line"><span></span></span>
<span class="line"><span>切换node版本</span></span>
<span class="line"><span>nvm use version</span></span>
<span class="line"><span></span></span>
<span class="line"><span>卸载指定版本node</span></span>
<span class="line"><span>nvm uninstall version</span></span>
<span class="line"><span></span></span>
<span class="line"><span>设置存储不同版本node的目录</span></span>
<span class="line"><span>nvm root 存储路径</span></span></code></pre></div><h4 id="nvm-use-version-报错-exit-status-1-乱码" tabindex="-1">nvm use [version] 报错“exit status 1 乱码” <a class="header-anchor" href="#nvm-use-version-报错-exit-status-1-乱码" aria-label="Permalink to &quot;nvm use [version] 报错“exit status 1 乱码”&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>搜索到的可能导致的原因有：</span></span>
<span class="line"><span>1、安装路径有中文</span></span>
<span class="line"><span>2、安装路径有空格</span></span>
<span class="line"><span>3、CMD命令行窗口不是管理员权限打开</span></span>
<span class="line"><span>4、配置文件和实际安装路径不符</span></span></code></pre></div><h2 id="node版本切换n-mac" tabindex="-1">Node版本切换n(Mac) <a class="header-anchor" href="#node版本切换n-mac" aria-label="Permalink to &quot;Node版本切换n(Mac)&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>安装</span></span>
<span class="line"><span>npm install -g n</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装完成之后，直接输入n后，会输出当前已经安装的node版本以及正在使用的版本</span></span>
<span class="line"><span>你可以通过移动上下方向键来选择要使用的版本，最后按回车生效</span></span>
<span class="line"><span></span></span>
<span class="line"><span>n</span></span>
<span class="line"><span>    0.10.1 </span></span>
<span class="line"><span>    0.10.15 </span></span>
<span class="line"><span>o   0.10.21 </span></span>
<span class="line"><span>    0.11.8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装最新版本</span></span>
<span class="line"><span>n latest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装稳定版本</span></span>
<span class="line"><span>n stable</span></span>
<span class="line"><span></span></span>
<span class="line"><span>删除某个版本</span></span>
<span class="line"><span>n rm 0.10.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>以指定的版本来执行脚本</span></span>
<span class="line"><span>n use 0.10.21 some.js</span></span></code></pre></div><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h2><blockquote><p><strong>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/(opens new window)</a></strong></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>NPM的全称是Node Package Manager包管理器，随NodeJS一起安装的包管理工具</span></span>
<span class="line"><span>它很方便的让开发者下载、安装、上传以及管理已经安装的包</span></span></code></pre></div><h2 id="生成包配置文件package-json" tabindex="-1">生成包配置文件package.json <a class="header-anchor" href="#生成包配置文件package-json" aria-label="Permalink to &quot;生成包配置文件package.json&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm init</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    name:&quot;包名&quot;,</span></span>
<span class="line"><span>    version:&quot;版本号&quot;,</span></span>
<span class="line"><span>    description:&quot;包的简介&quot;,</span></span>
<span class="line"><span>    keywords:&quot;关键词数组，可被npm库中搜索到&quot;,</span></span>
<span class="line"><span>    author：&quot;包作者&quot;,</span></span>
<span class="line"><span>    scripts：&quot;包的命令列表&quot;,</span></span>
<span class="line"><span>    main:&quot;入口文件&quot;,</span></span>
<span class="line"><span>    dependencies:&quot;生产环境下依赖包列表&quot;,</span></span>
<span class="line"><span>    devDenpendencies:&quot;开发环境下依赖包列表&quot;,</span></span>
<span class="line"><span>    maintainters:&quot;包维护者列表&quot;,</span></span>
<span class="line"><span>    contributors:&quot;贡献者列表&quot;,</span></span>
<span class="line"><span>    bus:&quot;可反馈bug的url或者email&quot;,</span></span>
<span class="line"><span>    lincenses:&quot;当前包所使用的许可证列表&quot;,</span></span>
<span class="line"><span>    repositories:&quot;源代码的托管位置&quot;,</span></span>
<span class="line"><span>    homepage:&quot;当前包的网站位置&quot;,</span></span>
<span class="line"><span>    os:&quot;支持的操作系统列表，一般为空（基本都支持）&quot;,</span></span>
<span class="line"><span>    cpu:&quot;支持的CPU架构列表，一般为空（基本都支持）&quot;,</span></span>
<span class="line"><span>    engine:&quot;支持的javascript引擎列表，一般为空（基本都支持）&quot;,</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="全局安装与本地安装" tabindex="-1">全局安装与本地安装 <a class="header-anchor" href="#全局安装与本地安装" aria-label="Permalink to &quot;全局安装与本地安装&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>本地安装</span></span>
<span class="line"><span>npm install express</span></span>
<span class="line"><span></span></span>
<span class="line"><span>全局安装</span></span>
<span class="line"><span>npm install express -g</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装指定版本</span></span>
<span class="line"><span>npm install express@4.1.1</span></span></code></pre></div><h2 id="本地安装" tabindex="-1">本地安装 <a class="header-anchor" href="#本地安装" aria-label="Permalink to &quot;本地安装&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>将安装包放在当前目录下的node_modules文件夹中</span></span>
<span class="line"><span></span></span>
<span class="line"><span>如果没有node_modules目录，会在当前执行 npm 命令的目录下生成node_modules目录</span></span>
<span class="line"><span></span></span>
<span class="line"><span>可以通过 require() 来引入本地安装的包</span></span></code></pre></div><h2 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-label="Permalink to &quot;全局安装&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>将安装包放在 /usr/local 下可以直接在命令行里使用</span></span>
<span class="line"><span>不能通过 require() 来引入本地安装的包</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看全局安装路径</span></span>
<span class="line"><span>npm config get prefix</span></span></code></pre></div><h2 id="其他参数" tabindex="-1">其他参数 <a class="header-anchor" href="#其他参数" aria-label="Permalink to &quot;其他参数&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-S, --save 安装包信息将写入到 dependencies（生产环境下依赖包列表）</span></span>
<span class="line"><span>npm install express --save</span></span>
<span class="line"><span>npm install express -S</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-D, --save-dev 安装包信息将加入到 devDependencies（开发环境下依赖包列表）</span></span>
<span class="line"><span>npm install gulp --save-dev</span></span>
<span class="line"><span>npm install gulp -D</span></span></code></pre></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>查看所有全局安装的模块</span></span>
<span class="line"><span>npm ls -g</span></span>
<span class="line"><span></span></span>
<span class="line"><span>查看npm默认设置</span></span>
<span class="line"><span>npm config ls（部分）</span></span>
<span class="line"><span>npm config ls -l（全部）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>清除node_modules中的编译缓存</span></span>
<span class="line"><span>npm cache clean -f</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装package.json中的所有依赖包</span></span>
<span class="line"><span>npm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>搜索模块</span></span>
<span class="line"><span>npm search express</span></span>
<span class="line"><span></span></span>
<span class="line"><span>更新模块</span></span>
<span class="line"><span>npm update express</span></span>
<span class="line"><span>npm update express -g 更新全局</span></span>
<span class="line"><span></span></span>
<span class="line"><span>卸载模块</span></span>
<span class="line"><span>npm uninstall express</span></span>
<span class="line"><span>npm uninstall express -g 删除全局</span></span></code></pre></div><h2 id="nrm快速切换npm源" tabindex="-1">nrm快速切换NPM源 <a class="header-anchor" href="#nrm快速切换npm源" aria-label="Permalink to &quot;nrm快速切换NPM源&quot;">​</a></h2><blockquote><p><strong><a href="https://github.com/Pana/nrm" target="_blank" rel="noreferrer">github.com/Pana/nrm(opens new window)</a></strong></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>安装</span></span>
<span class="line"><span>npm install -g nrm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>列出可选的源</span></span>
<span class="line"><span>nrm ls    </span></span>
<span class="line"><span></span></span>
<span class="line"><span>* npm ---- https://registry.npmjs.org/</span></span>
<span class="line"><span>  cnpm --- http://r.cnpmjs.org/</span></span>
<span class="line"><span>  taobao - http://registry.npm.taobao.org/</span></span>
<span class="line"><span>  eu ----- http://registry.npmjs.eu/</span></span>
<span class="line"><span>  au ----- http://registry.npmjs.org.au/</span></span>
<span class="line"><span>  sl ----- http://npm.strongloop.com/</span></span>
<span class="line"><span>  nj ----- https://registry.nodejitsu.com/</span></span>
<span class="line"><span>带 * 的是当前使用的源，上面的输出表明当前源是官方源。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>切换</span></span>
<span class="line"><span>nrm use taobao  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>测试速度</span></span>
<span class="line"><span>nrm test npm</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>测试所有源的响应时间：</span></span>
<span class="line"><span>nrm test </span></span>
<span class="line"><span></span></span>
<span class="line"><span>  npm ---- 891ms</span></span>
<span class="line"><span>  cnpm --- 1213ms</span></span>
<span class="line"><span>* taobao - 460ms</span></span>
<span class="line"><span>  eu ----- 3859ms</span></span>
<span class="line"><span>  au ----- 1073ms</span></span>
<span class="line"><span>  sl ----- 4150ms</span></span>
<span class="line"><span>  nj ----- 8008ms</span></span></code></pre></div><h2 id="npx" tabindex="-1">npx <a class="header-anchor" href="#npx" aria-label="Permalink to &quot;npx&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npx是npm5.2之后发布的一个命令，就是执行npm依赖包的二进制文件，简而言之，就是我们可以使用npx来执行各种命令</span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用npx可以在命令行直接执行本地已安装的依赖包命令，不用在scripts脚本写入命令，也不用麻烦的去找本地脚本</span></span></code></pre></div><h2 id="npx举例" tabindex="-1">npx举例 <a class="header-anchor" href="#npx举例" aria-label="Permalink to &quot;npx举例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i -D mocha</span></span>
<span class="line"><span>npx mocha --version</span></span></code></pre></div><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1、去node_modules/.bin路径检查npx后的命令是否存在，找到之后执行</span></span>
<span class="line"><span>2、找不到，就去环境变量$PATH里面，检查npx后的命令是否存在，找到之后执行</span></span>
<span class="line"><span>3、还是找不到，自动下载一个临时的依赖包最新版本在一个临时目录，然后再运行命令，运行完之后删除，不污染全局环境</span></span></code></pre></div><h2 id="yarn" tabindex="-1">Yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;Yarn&quot;">​</a></h2><blockquote><p><strong>官网：<a href="https://www.yarnpkg.cn/" target="_blank" rel="noreferrer">https://www.yarnpkg.cn/(opens new window)</a></strong></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Yarn为Node.js平台的代码包管理器。类似于知名的npm包管理器，实际是npm客户端</span></span>
<span class="line"><span></span></span>
<span class="line"><span>特点：快速、安全、可靠</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1.离线模式</span></span>
<span class="line"><span>如果你之前安装过某个包，你就可以在没有网络连接的情况下再次安装它</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.确定性</span></span>
<span class="line"><span>不管是什么顺序，在不同的机器上的依赖会以同一方式安装</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3.网络性能</span></span>
<span class="line"><span>Yarn可以高效地队列化请求并且避免请求瀑布化，使网络利用率最大化</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4.相同的软件包</span></span>
<span class="line"><span>从 npm 安装软件包并使用相同的包管理流程</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5.网络适应</span></span>
<span class="line"><span>单个请求失败不会导致安装失败，请求失败时会重试</span></span>
<span class="line"><span></span></span>
<span class="line"><span>6.扁平模式</span></span>
<span class="line"><span>解析不匹配的依赖版本为一个单一的版本来避免导致多个版本</span></span></code></pre></div><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Mac安装</span></span>
<span class="line"><span>brew install yarn</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Windows安装</span></span>
<span class="line"><span>下载.msi按装包。确保Node.js已经安装并可用。</span></span>
<span class="line"><span>https://yarnpkg.com/latest.msi</span></span>
<span class="line"><span></span></span>
<span class="line"><span>检查安装是否成功</span></span>
<span class="line"><span>yarn --version</span></span></code></pre></div><h2 id="修改yarn全局安装和缓存位置" tabindex="-1">修改yarn全局安装和缓存位置 <a class="header-anchor" href="#修改yarn全局安装和缓存位置" aria-label="Permalink to &quot;修改yarn全局安装和缓存位置&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>改变 yarn 全局安装位置</span></span>
<span class="line"><span>yarn config  set global-folder &quot;你的磁盘路径&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>改变 yarn 缓存位置</span></span>
<span class="line"><span>yarn config set cache-folder &quot;你的磁盘路径&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>检查当前 yarn 的 bin位置</span></span>
<span class="line"><span>yarn global bin</span></span>
<span class="line"><span></span></span>
<span class="line"><span>检查当前 yarn 的 全局安装位置</span></span>
<span class="line"><span>yarn global dir</span></span>
<span class="line"><span></span></span>
<span class="line"><span>我们需要将全局安装目录添加到系统环境变量中去，否则通过 yarn安装全局包 的时候，在cmd命令行中是找不到的命令的</span></span></code></pre></div><h2 id="手动更换镜像源" tabindex="-1">手动更换镜像源 <a class="header-anchor" href="#手动更换镜像源" aria-label="Permalink to &quot;手动更换镜像源&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ yarn config set registry &quot;https://registry.npm.taobao.org&quot;</span></span></code></pre></div><h2 id="yrm快速切换镜像源" tabindex="-1">yrm快速切换镜像源 <a class="header-anchor" href="#yrm快速切换镜像源" aria-label="Permalink to &quot;yrm快速切换镜像源&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install -g yrm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>列出当前可用的所有镜像源</span></span>
<span class="line"><span>yrm ls</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm -----  https://registry.npmjs.org/</span></span>
<span class="line"><span>cnpm ----  http://r.cnpmjs.org/</span></span>
<span class="line"><span>taobao --  https://registry.npm.taobao.org/</span></span>
<span class="line"><span>nj ------  https://registry.nodejitsu.com/</span></span>
<span class="line"><span>rednpm -- http://registry.mirror.cqupt.edu.cn</span></span>
<span class="line"><span>skimdb -- https://skimdb.npmjs.com/registry</span></span>
<span class="line"><span>yarn ----  https://registry.yarnpkg.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用淘宝镜像源</span></span>
<span class="line"><span>yrm use taobao</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>测试访问速度</span></span>
<span class="line"><span>yrm test taobao</span></span></code></pre></div><h2 id="常用命令-1" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令-1" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>生成包配置文件 package.json</span></span>
<span class="line"><span>yarn init</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装所有依赖包</span></span>
<span class="line"><span>yarn install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>安装依赖包</span></span>
<span class="line"><span>yarn add express -S</span></span>
<span class="line"><span></span></span>
<span class="line"><span>更新依赖包</span></span>
<span class="line"><span>yarn upgrade express -S</span></span>
<span class="line"><span></span></span>
<span class="line"><span>手动选择升级的依赖包</span></span>
<span class="line"><span>yarn upgrade-interactive --latest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>更新到最新版</span></span>
<span class="line"><span>yarn self-update</span></span>
<span class="line"><span></span></span>
<span class="line"><span>删除依赖包</span></span>
<span class="line"><span>yarn remove express -S</span></span>
<span class="line"><span></span></span>
<span class="line"><span>清除缓存</span></span>
<span class="line"><span>yarn cache clean</span></span></code></pre></div><h2 id="gitbook环境" tabindex="-1">GitBook环境 <a class="header-anchor" href="#gitbook环境" aria-label="Permalink to &quot;GitBook环境&quot;">​</a></h2><h3 id="以下命令需要在超级管理员权限下执行" tabindex="-1">以下命令需要在超级管理员权限下执行 <a class="header-anchor" href="#以下命令需要在超级管理员权限下执行" aria-label="Permalink to &quot;以下命令需要在超级管理员权限下执行&quot;">​</a></h3><h3 id="_1、安装nvm工具多nodejs版本管理工具-按照下面的步骤来走" tabindex="-1">1、安装nvm工具多NodeJS版本管理工具,按照下面的步骤来走 <a class="header-anchor" href="#_1、安装nvm工具多nodejs版本管理工具-按照下面的步骤来走" aria-label="Permalink to &quot;1、安装nvm工具多NodeJS版本管理工具,按照下面的步骤来走&quot;">​</a></h3><blockquote><ul><li><a href="https://www.cnblogs.com/gaozejie/p/10689742.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/gaozejie/p/10689742.html</a></li><li><a href="https://www.cnblogs.com/wyy1234/p/9727142.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/wyy1234/p/9727142.html</a> (需要设置nvm安装npm包的全局目录)</li></ul></blockquote><h3 id="_2、安装nodejs版本" tabindex="-1">2、安装nodejs版本 <a class="header-anchor" href="#_2、安装nodejs版本" aria-label="Permalink to &quot;2、安装nodejs版本&quot;">​</a></h3><blockquote><ul><li>nvm install 6.17.1</li></ul></blockquote><h3 id="_3、切换版本" tabindex="-1">3、切换版本 <a class="header-anchor" href="#_3、切换版本" aria-label="Permalink to &quot;3、切换版本&quot;">​</a></h3><blockquote><ul><li>nvm use 6.17.1</li></ul></blockquote><h3 id="_4、开启nodejs版本管理" tabindex="-1">4、开启NodeJS版本管理 <a class="header-anchor" href="#_4、开启nodejs版本管理" aria-label="Permalink to &quot;4、开启NodeJS版本管理&quot;">​</a></h3><blockquote><ul><li>nvm on</li></ul></blockquote><h3 id="_5、查看node版本是否有切换" tabindex="-1">5、查看node版本是否有切换 <a class="header-anchor" href="#_5、查看node版本是否有切换" aria-label="Permalink to &quot;5、查看node版本是否有切换&quot;">​</a></h3><blockquote><ul><li>node --version</li></ul></blockquote><h3 id="_6、安装cnpm淘宝镜像" tabindex="-1">6、安装cnpm淘宝镜像 <a class="header-anchor" href="#_6、安装cnpm淘宝镜像" aria-label="Permalink to &quot;6、安装cnpm淘宝镜像&quot;">​</a></h3><blockquote><ul><li>npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org/" target="_blank" rel="noreferrer">https://registry.npm.taobao.org</a></li></ul></blockquote><h3 id="_7、安装gitbook" tabindex="-1">7、安装Gitbook <a class="header-anchor" href="#_7、安装gitbook" aria-label="Permalink to &quot;7、安装Gitbook&quot;">​</a></h3><blockquote><ul><li>cnpm install ­-g gitbook­-cli</li></ul></blockquote><h3 id="_8、安装完成后在webnote项目目录下面执行" tabindex="-1">8、安装完成后在webnote项目目录下面执行 <a class="header-anchor" href="#_8、安装完成后在webnote项目目录下面执行" aria-label="Permalink to &quot;8、安装完成后在webnote项目目录下面执行&quot;">​</a></h3><blockquote><ul><li>gitbook init</li></ul></blockquote><h3 id="_9、最后一步编译-编译成功后看下图" tabindex="-1">9、最后一步编译，编译成功后看下图 <a class="header-anchor" href="#_9、最后一步编译-编译成功后看下图" aria-label="Permalink to &quot;9、最后一步编译，编译成功后看下图&quot;">​</a></h3><blockquote><ul><li>gitbook build --gitbook=2.6.7</li></ul></blockquote><p><img src="https://topmost.gitee.io/book/mdphoto/extends/gitbook.png" alt="gitbook"></p><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>_book            书籍编译生成目录;</span></span>
<span class="line"><span>book.json        书籍配置文件不需要动</span></span>
<span class="line"><span>README.md        默认首页</span></span>
<span class="line"><span>SUMMARY.md        书籍目录</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mdbook/          书籍文件夹</span></span>
<span class="line"><span>    backend/         WEB后端开发</span></span>
<span class="line"><span>    base/            WEB入门基础</span></span>
<span class="line"><span>    frontend/         WEB前端开发</span></span>
<span class="line"><span>    standard/         预科体验班</span></span>
<span class="line"><span>    extends/        课外拓展技术</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>mdphoto/         图片资源文件夹</span></span>
<span class="line"><span>    backend/         WEB后端开发</span></span>
<span class="line"><span>    base/            WEB入门基础</span></span>
<span class="line"><span>    frontend/         WEB前端开发</span></span>
<span class="line"><span>    standard/         预科体验班</span></span>
<span class="line"><span>    back/              首页背景图</span></span>
<span class="line"><span>    extends/        课外拓展技术</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>mdwork/            作业文件夹</span></span>
<span class="line"><span>    backend/         WEB后端开发</span></span>
<span class="line"><span>    base/            WEB入门基础</span></span>
<span class="line"><span>    frontend/         WEB前端开发</span></span>
<span class="line"><span>    standard/         预科体验班</span></span>
<span class="line"><span>    extends/        课外拓展技术</span></span></code></pre></div><h3 id="summary-md" tabindex="-1">SUMMARY.md <a class="header-anchor" href="#summary-md" aria-label="Permalink to &quot;SUMMARY.md&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>先在SUMMARY.md文件中设置好书籍目录结构，发给管理员看</span></span>
<span class="line"><span>没有问题了用下面命令初始化自动生成文件</span></span></code></pre></div><blockquote><ul><li>gitbook init</li></ul></blockquote><h5 id="写好之后提交到git仓库远程仓库里面-已经设置好文件忽略规则了-所以按照忽略文件规则上传" tabindex="-1">写好之后提交到Git仓库远程仓库里面,已经设置好文件忽略规则了,所以按照忽略文件规则上传 <a class="header-anchor" href="#写好之后提交到git仓库远程仓库里面-已经设置好文件忽略规则了-所以按照忽略文件规则上传" aria-label="Permalink to &quot;写好之后提交到Git仓库远程仓库里面,已经设置好文件忽略规则了,所以按照忽略文件规则上传&quot;">​</a></h5><h5 id="笔记一定要按照规范来书写-不要乱写-否则返工次数太多影响进度" tabindex="-1">笔记一定要按照规范来书写，不要乱写！否则返工次数太多影响进度 <a class="header-anchor" href="#笔记一定要按照规范来书写-不要乱写-否则返工次数太多影响进度" aria-label="Permalink to &quot;笔记一定要按照规范来书写，不要乱写！否则返工次数太多影响进度&quot;">​</a></h5>`,89),i=[l];function t(c,o,r,d,h,u){return a(),s("div",null,i)}const g=n(e,[["render",t]]);export{b as __pageData,g as default};
